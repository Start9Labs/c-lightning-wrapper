compat: v0
id: c-lightning
version: 0.9.3
title: c-lightning
description:
  short: "An implementation of the Lightning Network protocol by Blockstream."
  long: "c-lightning is a lightweight, highly customizable, and standards compliant implementation of the Lightning Network protocol. It is optimized for performance and extendibility."
release-notes: https://github.com/ElementsProject/lightning/releases/tag/v0.9.1
ports:
  - internal: 9735
    tor: 9735
  - internal: 8080
    tor: 8080
image:
  type: tar
shm-size-mb: 64
mount: /root/.lightning
shared: shared
has-instructions: true
os-version-required: ">=0.2.8"
os-version-recommended: ">=0.2.8"
install-alert: |
  READ CAREFULLY! c-lightning and the Lightning Network are considered beta software. Please use with caution and do not risk more money than you are willing to lose. We encourage frequent backups. If for any reason, you need to restore c-lightning from a backup, your on-chain wallet will be restored, but all your channels will be closed and their funds returned to your on-chain wallet, minus fees. It may also take some time for this process to occur.
uninstall-alert: |
  READ CAREFULLY! Uninstalling c-lightning will result in permanent loss of data, including its private keys for its on-chain wallet and all channel states. Please make a backup if you have any funds in your on-chain wallet or in any channels. Recovering from backup will restore your on-chain wallet, but due to the architecture of the Lightning Network, your channels cannot be recovered. All your channels will be closed and their funds returned to your on-chain wallet, minus fees. 
restore-alert: |
  Restoring c-lightning will overwrite its current data, including its on-chain wallet and channels. Any channels opened since the last backup will be forgotten and may linger indefinitely, and channels contained in the backup will be closed and their funds returned to your on-chain wallet, minus fees.
assets: []
hidden-service-version: v3
dependencies:
  btc-rpc-proxy:
    version: "^0.2.0"
    optional: Can alternatively configure an external bitcoin node.
    description: Used to fetch validated blocks.
    config:
      - rule: '''users.*.name = "c-lightning"'
        description: 'Must have an RPC user named "c-lightning"'
        suggestions:
          - PUSH:
              to: "users"
              value:
                name: c-lightning
                allowed-calls: []
          - SET:
              var: 'users.[first(item => ''item.name = "c-lightning")].password'
              to-entropy:
                charset: "a-z,A-Z,0-9"
                len: 22
      - rule: '''users.[first(item => ''item.name = "c-lightning")].allowed-calls.* = "echo"'
        description: 'RPC user "c-lightning" must have "echo" enabled'
        suggestions:
          - PUSH:
              to: 'users.[first(item => ''item.name = "c-lightning")].allowed-calls'
              value: "echo"
      - rule: '''users.[first(item => ''item.name = "c-lightning")].allowed-calls.* = "gettxout"'
        description: 'RPC user "c-lightning" must have "gettxout" enabled'
        suggestions:
          - PUSH:
              to: 'users.[first(item => ''item.name = "c-lightning")].allowed-calls'
              value: "gettxout"
      - rule: '''users.[first(item => ''item.name = "c-lightning")].allowed-calls.* = "getblockchaininfo"'
        description: 'RPC user "c-lightning" must have "getblockchaininfo" enabled'
        suggestions:
          - PUSH:
              to: 'users.[first(item => ''item.name = "c-lightning")].allowed-calls'
              value: "getblockchaininfo"
      - rule: '''users.[first(item => ''item.name = "c-lightning")].allowed-calls.* = "sendrawtransaction"'
        description: 'RPC user "c-lightning" must have "sendrawtransaction" enabled'
        suggestions:
          - PUSH:
              to: 'users.[first(item => ''item.name = "c-lightning")].allowed-calls'
              value: "sendrawtransaction"
      - rule: '''users.[first(item => ''item.name = "c-lightning")].allowed-calls.* = "getblockhash"'
        description: 'RPC user "c-lightning" must have "getblockhash" enabled'
        suggestions:
          - PUSH:
              to: 'users.[first(item => ''item.name = "c-lightning")].allowed-calls'
              value: "getblockhash"
      - rule: '''users.[first(item => ''item.name = "c-lightning")].allowed-calls.* = "getblock"'
        description: 'RPC user "c-lightning" must have "getblock" enabled'
        suggestions:
          - PUSH:
              to: 'users.[first(item => ''item.name = "c-lightning")].allowed-calls'
              value: "getblock"
      - rule: '''users.[first(item => ''item.name = "c-lightning")].allowed-calls.* = "estimatesmartfee"'
        description: 'RPC user "c-lightning" must have "estimatesmartfee" enabled'
        suggestions:
          - PUSH:
              to: 'users.[first(item => ''item.name = "c-lightning")].allowed-calls'
              value: "estimatesmartfee"
      - rule: '''users.[first(item => ''item.name = "c-lightning")].allowed-calls.* = "getnetworkinfo"'
        description: 'RPC user "c-lightning" must have "getnetworkinfo" enabled'
        suggestions:
          - PUSH:
              to: 'users.[first(item => ''item.name = "c-lightning")].allowed-calls'
              value: "getnetworkinfo"
      - rule: 'users.[first(item => ''item.name = "c-lightning")].fetch-blocks?'
        description: 'RPC user "c-lightning" must have "Fetch Blocks" enabled'
        suggestions:
          - SET:
              var: 'users.[first(item => ''item.name = "c-lightning")].fetch-blocks'
              to-value: true
